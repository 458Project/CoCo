% PT Scanner.ssl   Ver. 1.04
%
% Date:  30 Jun 1980
%       (Revised 30 Dec 2016)
%
% Author:  Alan Rosselet
%
% Abstract
%     The scanner breaks a PT source program up into syntax tokens.
%   It removes token separators - blanks, tabs, comments.  The
%   scanner detects these lexical errors:  unclosed comments,
%   unclosed literals, literals that cross a line boundary,
%   illegal characters and integers followed by identifiers with no
%   separator between them.

Input : 
        lLetter 
        firstCharClass = lLetter 
        lDigit
        lPlus           '+'
        lMinus          '-'
        lStar           '*'
        lColon          ':'
        lEquals         '='
        lDot            '.'
        lComma          ','
        lSemicolon      ';'
        lQuote
        lLeftAngle      '<'
        lRightAngle     '>'
        lLeftParen      '('
        lRightParen     ')'
        lLeftBracket    '['
        lRightBracket   ']'
        lLeftBrace      '{'
        lRightBrace     '}'
        lHash           '#'   %Adding new Quby character #
        lBang           '!'   %Adding new Quby character !
        lBlank
        lIllegal
        lNewLine
        lTab
        lNewPage 
        lEndFile
        lastCharClass = lEndFile;

Output :
        % Keyword tokens -
        %   Tokens pDiv through pRepeat are keywords which will be separated
        %   from user defined identifiers by the Screener.  This Scanner
        %   treats them all as identifiers.
        pDiv 
        firstKeywordToken = pDiv
        pMod
        pOr
        pAnd
        pNot
        pElse
        pOf
        pEnd
        pArray
        pFile
        pPacked
        pVar
        pIf
        pExt      % Removed the old PT output keywords token and added new Quby output tokens from 66-77
        pCon
        pTyp
        pDef
        pPub
        pElif
        pSel
        pIs
        pOn
        pBreak
        pLen
        pRep
        lastKeywordToken = pRep

        % Scanner tokens -
        %   These are the tokens actually recognized by the Scanner itself.

        % Compound tokens - 
        %   These will be sent to the parser with a value or index.
        pIdentifier 
        firstCompoundInputToken = pIdentifier
        pInteger
        pLiteral
        lastCompoundInputToken = pLiteral

        % Non-compound tokens - 
        %   These tokens simply represent themselves.
        pNewLine
        pEndFile
        pPlus
        pMinus
        pStar
        pPlusEqual      % Added non-compound output tokens from line 97-101
        pMinusEqual
        pDoubleEqual
        pLeftBrace
        pRightBrace
        pDot
        pComma
        pSemicolon
        pColon
        pEquals
        pNotEqual
        pLess
        pLessEqual
        pGreaterEqual
        pGreater
        pLeftParen
        pRightParen
        pLeftBracket
        pRightBracket
        pBang     %Adding the output token for bang
        pDotDot
        lastSyntaxToken = pDotDot;

Error :
        eIllegalChar = 5
        firstScanError = eIllegalChar
        eLiteralLine
        eLiteralEOF
        eCommentEOF
        eNoSeparator
        lastScanError = eNoSeparator;

mechanism Buffer :
    % Buffer saves the characters associated with the
    % compound tokens identifier, integer and literal.

    oBufferSave;
        % Save the character form of the last accepted lexical token.




rules

% Note that the order of choice alternatives
% may have a significant effect on performance
% under some implementations of S/SL.
Scan :
        {[
            | lBlank :
            | lLetter:
                oBufferSave
                @Identifier
            | lNewLine:
                .pNewLine
            | lTab:
            | ';':
                .pSemicolon
            | '(':            %Removed the support for alternate comments using parentheses. Now it's just emitted as a left parentheses. 
                .pLeftParen
            | ')':
                .pRightParen
            | '[':
                .pLeftBracket
            | ']':
                .pRightBracket
            | '{':            % Added the cases to emit left brace instead of using it for comment
                .pLeftBrace
            | '}':            % Added the cases to emit right brace instead of using it for comment
                .pRightBrace
            | ',':
                .pComma
            | ':':            % Removed the section where : was followed by = for value assignment
                .pColon
            | lDigit:
                oBufferSave
                @Integer
                [
                    | lLetter:
                        #eNoSeparator
                        oBufferSave
                        @Identifier
                    | *:
                ]
            | '=':            % Added the section where = can be followed by another = to emit DoubleEqual
                [       
                    | '=':
                        .pDoubleEqual
                    | *:
                        .pEquals
                ]
            | '+':            % Added the section where + can be followed by another = to emit PlusEqual
                [
                    | '=':
                        .pPlusEqual
                    | *:
                        .pPlus
                ]
            | lQuote:
                @Literal   
            | '-':            % Added the section where - can be followed by another = to emit MinusEqual
                [
                    | '=':
                        .pMinusEqual
                    | *:
                        .pMinus
                ]
            | '.':
                [
                    | '.':
                        .pDotDot
                    | *:
                        .pDot
                ]
            | '<':
                [
                    | '=':
                        .pLessEqual
                    | *:
                        .pLess
                ]
            | '>':
                [
                    | '=':
                        .pGreaterEqual
                    | *:
                        .pGreater
                ]
            | '#':      % Added the case for hash to handle the comments>
                @Comment
            | '!':      % Added the case for bang  
                [    
                    | '=':    % If bang is followed by =, then emit notEquals
                        .pNotEqual
                    | *:      % If bang is not followed by =, then emit bang
                        .pBang
                ]
            | '*':
                .pStar
            | lNewPage:
            | lEndFile:
                .pEndFile
            | *:
                ?
                #eIllegalChar
        ]};

Identifier :
        % Assemble an identifier token

        {[
            | lLetter, lDigit:
                oBufferSave
            | *:
                .pIdentifier
                >
        ]};

Integer :
        % Assemble an integer token

        {[
            | lDigit:
                oBufferSave
            | *:
                .pInteger
                >
        ]};

Literal :
        % Assemble a literal string token

        {[
            | lQuote:
                [
                    | lQuote:
                        oBufferSave
                    | *:
                        .pLiteral
                        >
                ]
            | lNewLine:         % literal must not cross a line boundary
                #eLiteralLine
                .pNewLine
                >
            | lEndFile:         % literal must be closed before EOF
                #eLiteralEOF
                .pEndFile
                >
            | *:        % literal may contain any other character
                ?
                oBufferSave
        ]};

Comment :
        % Discard the contents of a comment
        % Changed the functionality of Comment to not use the braces anymore
        {[
            | lNewLine:
                .pNewLine
                >
            | lEndFile:         % comment must be closed before EOF
                #eCommentEOF
                .pEndFile
                >
            | *:        % comment may contain any other character
                ?
        ]};
%Removed the AlternateComment section
end
