# Quby example program with modules
# Blackjack playing program
ext input, output

# J.R. Cordy, Computer Systems Research Group, 
# University of Toronto, July 1975             
# For instructions on use, run once with no input.

# hands of players                              
typ handarray : array [1 .. 7] of integer
var playershand : handarray
var dealershand : handarray
var playerscards : integer
var dealerscards : integer

# game counts for each shuffle 
var gamesplayed : integer
var gamesplayerwon : integer
var gamesdealerwon : integer

# player's hand values 
var dealerscount : integer
var playerscount : integer

# flags to indicate player's status 
var dealerstops : boolean
var playerstops : boolean

# player parameters 
var playersname : string

# player's count limit for naive strategy 
var joenaivesguts : integer

# continue flag 
var continue : boolean

# play counter
var playCount : integer

# random number generation
mod random
    # random seed 
    var seed : integer
    var multiplier : integer

    def initialize
        # initialize random seed
        seed = 13277
        multiplier = 17
    end

    def pub randint (var result : integer, modulus : integer)
        if multiplier == 17 :
            multiplier = 19
        else : 
            multiplier = 17
        end
        seed = (seed * multiplier) mod 10000
        result = (seed mod modulus) + 1
    end #randint

    initialize
end 


# deck to deal cards from 
mod cards
    var deck : array [1 .. 52] of integer
    var nextcard : integer

    def pub shuffle
        # puts a new shuffled deck of cards in the array 'deck'. 
        # cards are coded as 1 to 13, 1 being ace, 
        # 2-10 as they are, and 11-13 being j,q,k respectively. 

        var card : integer
        var cardcount : array [1 .. 13] of integer
        var c : integer
        var ncards : integer

        c = 1
        rep
            cardcount [c] = 0
            c = c + 1
            on c > 13 : break
        end

        ncards = 1
        rep
            randint (card, 13)
            rep
                on cardcount [card] != 4 : break
                randint (card, 13)
            end
    
            deck [ncards] = card
            cardcount [card] = cardcount [card] + 1
    
            ncards += 1
            on ncards > 52 : break
        end
    
        nextcard = 0
    end #shuffle

    def pub dealcard (var card : integer)
        nextcard += 1
        card = deck [nextcard]
    end #dealcard

    def pub cardsleft (var number : integer)
        number = 52 - nextcard + 1
    end #cardsleft
end


mod namesofcards
    # alphanumeric card names 
    var cardnames : array [1 .. 13] of string

    def pub printhandimage (ncards : integer, var hand : handarray)
        # print an image of the hand  
        var i : integer
        i = 1
        rep
            on i > ncards : break
            print (" ", cardnames [hand [i]])
            i += 1
        end
    end #printhandimage

    # initialize card names
    cardnames [1] = "A"
    cardnames [2] = "2"
    cardnames [3] = "3"
    cardnames [4] = "4"
    cardnames [5] = "5"
    cardnames [6] = "6"
    cardnames [7] = "7"
    cardnames [8] = "8"
    cardnames [9] = "9"
    cardnames [10] = "10"
    cardnames [11] = "J"
    cardnames [12] = "Q"
    cardnames [13] = "K"
end


def printplayersname
    # print the player's name 
    if playersname == "e" :
        print ("E.O. Thorp")
    elif playersname == "j" :
        print ("Jim")
    else :
        print ("Pooja")
    end 
end #printplayersname


def somebodyplays (var r : boolean)
    # returns true if (there is another shuffle to   
    # be played (i.e. if (another player name is     
    # input), false otherwise initializes new shuffle                       
    gamesplayed = 0
    gamesplayerwon = 0
    gamesdealerwon = 0
    nl nl
    print ("New shuffle.") nl
    nl
    print ("Choose a player (e for E.O.Thorp, j for Jim, p for Pooja, q to quit): ")
    #get (playersname) getnl
    if (playCount > 3):
         playersname = "q"
    else:
         playersname = "e"
    end
    playCount += 1

    if playersname == "q" :
        r = false
    else :
        if playersname != "e" :
            print ("What does s/he stand on? ")
            get (joenaivesguts) getnl 
            rep
                on (joenaivesguts > 0) and (joenaivesguts < 21) : break
                print ("(1..20): ")
                get (joenaivesguts) getnl
            end
        end

        if playersname == "e" :
            nl
            print ("E.O.Thorp plays this time.") nl
        else : 
            nl
            print ("Next player is ")
            printplayersname
            print (".") nl
            print ("S/he stops at ", joenaivesguts:1, ".") nl

            if joenaivesguts < 15 :
                print ("(What a hamburger!)") nl
            else :
                print ("Good luck, ")
                printplayersname
                print (".") nl
            end
        end

        r = true
    end
end #somebodyplays 

def playing (var r : boolean)
    # returns true if (enough cards left for        
    # another game, otherwise prints a shuffle      
    # summary and returns false.                    

    var numcards: integer

    cardsleft (numcards)

    if numcards > 10 :
        nl
        print ("New game.") nl
        gamesplayed += 1
        r = true
    else : 
        nl
        print ("Too few cards left for another game.") nl
        print ("Of ", gamesplayed:1, " games, ")
        printplayersname
        print (" won ", gamesplayerwon:1, ", dealer won ", gamesdealerwon:1, ".") nl

        if gamesdealerwon > gamesplayerwon :
            print ("House cleans up on ")
            printplayersname
            print (" this time.") nl
        elif gamesplayerwon > gamesdealerwon :
            if playersname == "e" :
                print ("E.O.Thorp does it again.") nl
            else : 
                printplayersname
                print (" must have doctored the shuffle.") nl
            end
        else : 
            print ("Even shuffle.") nl
        end

        r = false
    end
end #playing


def playertakesacard 
    # player's hand gets another card from the top of the deck. 
    playerscards += 1
    dealcard (playershand [playerscards])
end #playertakesacard


def dealertakesacard 
    # dealer's hand gets another card from the top  of the deck.                                  
    dealerscards += 1
    dealcard (dealershand [dealerscards])
end


def deal 
    # initializes for a new hand and performs initial deal.                                 
    # player and dealer each get two cards.         

    playerstops = false
    dealerstops = false
    playerscards = 0
    dealerscards = 0

    playertakesacard
    dealertakesacard
    playertakesacard
    dealertakesacard

    print ("The initial deal gives ")
    printplayersname
    print (" :")
    printhandimage (playerscards, playershand) nl
    print ("  and the dealer :") 
    printhandimage (dealerscards, dealershand)
    print (".") nl
end #deal


def evaluate (ncards : integer, var hand : handarray,
              var softhand : boolean, var value : integer)
    # evaluates the best count for the hand, and    
    # sets 'softhand' to true if one or more aces are counted as 11.                            

    var nacescounted11 : integer
    var i : integer

    value = 0
    nacescounted11 = 0

    i = 1
    rep
        on i > ncards : break

        sel hand [i]: 
          is 2,3,4,5,6,7,8,9,10:
            # 2-10 
            value += hand [i]
          is 1:
            # A 
            value += 11
            nacescounted11 += 1
          else:
            # J,Q,K 
            value += 10
        end

        i += 1
    end

    rep 
        on (value <= 21) or (nacescounted11 == 0) : break
        value -= 10
        nacescounted11 -= 1
    end

    softhand = nacescounted11 > 0
end #evaluate


def dealer 
    # simulates play of dealer.                         
    # dealer plays the standard strategy of standing with 17 or better.                       
    # when dealer decides to stop, prints hand summary. 

    var softhand : boolean

    evaluate (dealerscards, dealershand, softhand, dealerscount)

    if dealerscount > 21 :
        print ("Dealer goes bust.") nl
        dealerstops = true
        gamesplayerwon += 1
    elif dealerscount == 21 :
        print ("Dealer calls blackjack.") nl
        dealerstops = true
        gamesdealerwon += 1
    else : 
        if dealerscount < 17 :
            dealertakesacard
        else : 
            dealerstops = true
        end
    end

    if dealerstops :
        print ("Dealer stands with ", dealerscount:1, ".") nl

        if dealerscount > playerscount :
            print ("House wins.") nl
            gamesdealerwon += 1
        elif dealerscount < playerscount :
            printplayersname
            print (" wins.") nl
            gamesplayerwon += 1
        else : 
            print ("Tie game.") nl
        end

    else : 
        print ("Dealer takes a card and now has ")
        printhandimage (dealerscards, dealershand) nl
    end

end #dealer


mod players

    def playerjoenaive 
        # simulates the naive player strategy 
        if playerscount < joenaivesguts :
            playertakesacard
        else : 
            playerstops = true
        end
    end #playerjoenaive

    def playerthorp (softhand : boolean)
        # simulates a simplified version of the player       
        # strategy described by E.O.Thorp in his book        
        # "Beat the Dealer" (Vintage books, 1966) pp. 20,21. 

        var dealershows: integer
        dealershows = dealershand [1]

        if softhand :
            # soft hand strategy 
            if dealershows > 8 :
                # 9 or 10  
                playerstops = playerscount > 18
            else : 
                # 2-8,A  
                playerstops = playerscount > 17
            end
        else : 
            # hard hand strategy  
            if (dealershows > 1) and (dealershows < 4) :
                # 2 or 3  
                playerstops = playerscount > 12
            elif (dealershows > 3) and (dealershows < 7) :
                # 4 to 6  
                playerstops = playerscount > 11
            else : 
                # 7 to 10,A  
                playerstops = playerscount > 16
            end
        end

        if not playerstops :
            playertakesacard
        end

    end #playerthorpe 

    def pub player 
        # simulates play of player                                
        # player plays either the naive strategy                  
        # or, if playersname == "E.O.Thorp", E.O.Thorp's strategy. 

        var softhand : boolean

        evaluate (playerscards, playershand, softhand, playerscount)

        if playerscount == 21 :
            printplayersname
            print (" calls blackjack.") nl
            playerstops = true
            dealerstops = true
            gamesplayerwon += 1
        elif playerscount > 21 :
            printplayersname
            print (" goes bust.") nl
            playerstops = true
            dealerstops = true
            gamesdealerwon += 1
        else : 
            if playersname == "e" :
                playerthorp (softhand)
            else : 
                playerjoenaive
            end
        end

        if playerstops :
            printplayersname
            print (" stands with ", playerscount:1, ".") nl
        else : 
            printplayersname
            print (" takes a card and now has ")
            printhandimage (playerscards, playershand) nl
        end
    end #player
end


# main program  
playCount = 0

# print program explanation 
print ("This program simulates the game of blackjack.") nl
nl
print ("The dealer plays the compulsory strategy of standing on 17 or better.") nl
nl
print ("The player plays either") nl
print ("  [1] The standard naive strategy of standing on n or better, or") nl
print ("  [2] A simplified version of the strategy described by  E.O.Thorp") nl
print ("      in his book ""Beat the Dealer"" (Vintage Books, 1966) pp. 20-21.") nl
nl
print ("Input :") nl
print ("  For each shuffle, a player name (character string of <= 20 characters),") nl
print ("  and if (the player name specified is not ""E.O.Thorp"", the count [n]") nl
print ("  on which the player stands.") nl
nl
print ("If the player name specified is ""E.O.Thorp"", the player strategy used", " will be Thorp's.")
nl
print ("Otherwise, the player will use the standard stop on count > n strategy.") nl
nl
print ("The program will simulate one complete shuffle of play for each player.") nl

# commence the games! 
somebodyplays (continue)

rep
   on not continue : break
    shuffle
    playing (continue)

    rep
        on not continue : break
        deal

        rep
            on playerstops : break
            player
        end

        rep
            on dealerstops : break
            dealer
        end

        playing (continue)
    end

    somebodyplays (continue)
end
