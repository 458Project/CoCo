ptConstDeclaration.pt
Test case to ensure old PT Style constant variable declaration using "const" keyword is no longer accepted by the Quby parser.
Quby implements the constant variable declaration using the "con" keyword as seen in qubyConDeclaration.pt test case.
Note, no syntax error will be reported as the parser is not able to tell if "const" may instead be a valid function call. The semantic phase will be able to verify if this is a valid statement. However it is expected that the .sConst keyword is not emitted in the test output.

ptMultiConstDeclaration.pt
Test case to ensure old PT Style constant variable declaration using "const" keyword is no longer accepted by the Quby parser when used *consecutively*.
Quby implements the constant variable declaration using the "con" keyword as seen in qubyConDeclaration.pt test case.
Note, no syntax error will be reported as the parser is not able to tell if "const" may instead be a valid function call. The semantic phase will be able to verify if this is a valid statement. However it is expected that the .sConst keyword is not emitted in the test output.

ptMultiVarDeclaration.pt
Test case to ensure variable declaration using "var" keyword is no longer accepted by the Quby parser when used *consecutively*.
Quby requires the "var" keyword to be repeated for each declaration, unlike the PT parser which allow multiple declarations under a single "var" keyword.

ptTypeDeclaration.pt
Test case to ensure old PT Style type declaration using "type" keyword is no longer accepted by the Quby parser.
Quby implements the type declaration using the "typ" keyword as seen in qubyTypDeclaration.pt test case.
Note, no syntax error will be reported as the parser is not able to tell if "type" may instead be a valid function call. The semantic phase will be able to verify if this is a valid statement. However it is expected that the .sVar keyword is not emitted in the test output.

qubyConDeclaration.pt
Test case to ensure the Quby parser accepts a constant variable declaration using the "con" keyword. Expected output should be in the form of:
sConst
sIdentifier
sInteger

qubyMultiDeclaration.pt
Test to ensure that the Quby parser has no issues parsing multiple declaration statements consecutively (versus just one declaration statement in a block).

qubyTypDeclaration.pt
Test case to ensure the Quby parser accepts a type declaration using the "typ" keyword. Expected output should be in the form of:
sType
sIdentifier
sIdentifier

qubyVarDeclaration.pt
Test case to ensure the Quby parser accepts a variable declaration using the "var" keyword. Expected output should be in the form of:
sVar
sIdentifier
sIdentifier
