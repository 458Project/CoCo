Phase 2 Documentation

Team Members : Clara Fu, Parv Mital, Johan Cornelissen, Mitchell Waite
Group: cisc458n 
   
Johan: NOTE, several lines in parser.ssl were commented out for the time being to allow for testing, in the end all the commented sections should be adjusted for quby. Example, if statements, loops etc.

Johan: Using phase1 feedback made two distinct changes. First change was removing the rule for "<>" being outputted as .pNotEqual, this is no longer the case in Quby. A test case to test this was also added to the ScannerScreener testsuite.
Second change involved add pRep to the output tokens of scan.ssl, and input tokens of parser.ssl, this token was overlooked in phase1. However it did already exist in stdIdentifiers file, causing some incorrect outputs in the test suite (tokens were being screened to one-off the actual keyword). The expected outputs have been adjusted to ensure they are correct. 

Johan: Changed qubyNoParamsProcedure.pt test, following forum post that it should be "def P" instead of "def P()". Also removed the ssl code used for this section. Forum post: http://cisc458.caslab.queensu.ca/forum/viewtopic.php?f=14&t=555

Johan: Added code to allow for Quby "modules", the sole code changes for this were in the @block rule of parser.ssl. A module can contain any other declarations or statements similar to a procedure, hence why 'mod' selector in @block was made to be recursive. Appropriate test files were created for the new modules block.

Johan: Added a few extra tests to routines test suite (tests with declarations, statements, etc, as well as one test to ensure pt style no longer works). Added test case documentation for routines and modules. 

Clara: Made a few changes to the parser.ssl in order to allow if, else statements to be wrapped with a begin and end. They also accept a colon for each if and else statement. Elif was implemented using the second option presented by the professor, which is to have nested if else statements instead of implementing a new elif semantic 
token. Also replaced the Equals and NotEquals to the new Quby representations of '==' and '!='. Wrote quby tests for each case and did not need to write PT tests
because the output token behavior should be the same? i think.

Johan: Updated case statement rules to work with 'sel' statement instead. Also added the requirement for 'else' in the case statement rule.
TODO: add more tests for sel statement, and IMPORTANT, create a statements rule(rule that does .sBegin, accepts unlimited statements, then outputs .sEnd), right now @BeginStmt uses pNewLine which is bad.

Johan: Added @Statements rule to allow for multiple statements in a row. Removed @BeginStmt and @Statement rule as they are no longer relevant in Quby.

Clara: Added tests for '=' old PT style conditional, and '<>' pt style not equals conditional.

Johan: Added ability to parse Quby style 'Rep' loops by modifying @repeatStmt to be @repStmt, and added appropriate tests in testSuite/parser/repStatement.
@repStmt now allows for "'on' expression : break" as specified in the quby documentation.

Parv: Added tests under parser. 2 tests under conditionals for qubyNotEquals and qubyDoubleEquals. A few tests for selStatements and statements. 

Parv: Added the rule to handle the substring and len operators for a string. Also added the tests in phase2 under testSuite/parser for string operators.
 
Johan: Deleted old PT style while loop rule from parser.ssl, fixed the array assignment from using ':=' to using '=' for in Quby. Added some tests for simple and array assignments (aka testing that '=' now works but ':=' doesn't).

############################################################
UPDATE DOCUMENTATION FOR PHASE 2!!!!!!!!!!!!!!!
############################################################

The goal of these modifications is to convert the Parser of the PT Pascal compiler into the Parser for Quby. A
detailed listing of all the changes made are listed below:

1. Token Definitions
   The parser input tokens were modified to correspond to the new set of output tokens emitted by the Quby Scanner/Screener. At the        same time, unused onld input tokens were removed and any new Quby input tokens were added. Following changes were made to the parser    tokens:
   - Replaced the old PT parser case statement output tokens sCaseStmt and sCaseEnd with the new Quby select statement tokens sSelStmt      and sSelEnd
   - Replaced the old PT parser loop statement output tokens sWhileStmt, sRepeatStmt and sRepeatEnd with the new Quby loop statement        tokens sRepStmt and sRepOnBreak.
   - Added new parser output tokens for Quby modules, sModule and sPublic, and for the Quby string operations sSubstring and sLen.

2. Programs
   The parsing of programs was modified for Quby to accept "ext" and not accept "program". 
   - Work was done in @Program rule, by replacing expectation for 'program' with 'ext' and removing the need for a program name. 
   - Also ensured no semi colon is needed at end of the line.
   - Changes were made in @BeginStmt rule to allow multiple statements (after declarations are complete) until end of file. This was        done by proceeding to look for more statements as long as there is a new line character. ".sBegin" and ".sEnd" token are emitted as      appropriate.

3. Declarations
   The parsing of constant, type and variable declarations was modified to meet the specifications of Quby language. 
   - Modified @Block rule in parser.ssl to accept new declarations format for con from "const", typ from "type", and var. 
   - Modified @Block rule to no longer requires 'begin' keyword.
   - Removed tje ability to give multiple constant declarations under a single "con" keyword. This change was made in                      @ConstantDefinitions rule.
   - In @ConstantValue rule, the expectation for semicolon after declaration was removed.
   - In @TypeDefinitions rule, removed the ability to give multiple type declarations under a single "typ" keyword. Also modified the      rule to use ":" instead of "=".
   - In @VariableDeclarations rule, removed the ability to give multiple variable declarations under a single "var" keyword. Also          removed the expectation for semicolon.
   - Changed @AssignmentOrCallStmt to use "=" instead of ":=".

4. Routines
   The parsing of routines was modified in order to add Quby functionality for procedures.
   - Added the functionality to output an sBegin token in the beginning of a procedure and have procedures end with 'end'. 
   - Added the option to make the procedure public using the 'pub' keyword.
   - Multiple parameters in a procedure are separated by commas instead of semicolons.
