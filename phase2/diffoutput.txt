diff --git a/ptsrc/lib/pt/parser.def b/ptsrc/lib/pt/parser.def
index 4c2ea7a..9475710 100644
--- a/ptsrc/lib/pt/parser.def
+++ b/ptsrc/lib/pt/parser.def
@@ -7,25 +7,25 @@
 	pOr = 2;
 	pAnd = 3;
 	pNot = 4;
-	pThen = 5;
-	pElse = 6;
-	pOf = 7;
-	pEnd = 8;
-	pUntil = 9;
-	pDo = 10;
-	pArray = 11;
-	pFile = 12;
-	pPacked = 13;
-	pProgram = 14;
-	pConst = 15;
-	pVar = 16;
-	pType = 17;
-	pProcedure = 18;
-	pBegin = 19;
-	pIf = 20;
-	pCase = 21;
-	pWhile = 22;
-	pRepeat = 23;
+	pElse = 5;
+	pOf = 6;
+	pEnd = 7;
+	pArray = 8;
+	pFile = 9;
+	pPacked = 10;
+	pVar = 11;
+	pIf = 12;
+	pExt = 13;
+	pCon = 14;
+	pTyp = 15;
+	pDef = 16;
+	pPub = 17;
+	pElif = 18;
+	pSel = 19;
+	pIs = 20;
+	pOn = 21;
+	pBreak = 22;
+	pLen = 23;
 	lastKeywordToken = 23;
 	pIdentifier = 24;
 	firstCompoundInputToken = 24;
@@ -37,23 +37,28 @@
 	pPlus = 29;
 	pMinus = 30;
 	pStar = 31;
-	pColonEquals = 32;
-	pDot = 33;
-	pComma = 34;
-	pSemicolon = 35;
-	pColon = 36;
-	pEquals = 37;
-	pNotEqual = 38;
-	pLess = 39;
-	pLessEqual = 40;
-	pGreaterEqual = 41;
-	pGreater = 42;
-	pLeftParen = 43;
-	pRightParen = 44;
-	pLeftBracket = 45;
-	pRightBracket = 46;
-	pDotDot = 47;
-	lastSyntaxToken = 47;
+	pPlusEquals = 32;
+	pMinusEquals = 33;
+	pDoubleEquals = 34;
+	pLeftBrace = 35;
+	pRightBrace = 36;
+	pDot = 37;
+	pComma = 38;
+	pSemicolon = 39;
+	pColon = 40;
+	pEquals = 41;
+	pNotEqual = 42;
+	pLess = 43;
+	pLessEqual = 44;
+	pGreaterEqual = 45;
+	pGreater = 46;
+	pLeftParen = 47;
+	pRightParen = 48;
+	pLeftBracket = 49;
+	pRightBracket = 50;
+	pBang = 51;
+	pDotDot = 52;
+	lastSyntaxToken = 52;
 
 	{ Output Tokens }
 	sIdentifier = 0;
@@ -76,8 +81,8 @@
 	sPacked = 14;
 	sFile = 15;
 	sRange = 16;
-	sCaseStmt = 17;
-	sCaseEnd = 18;
+	sSelStmt = 17;
+	sSelEnd = 18;
 	sLabelEnd = 19;
 	sExpnEnd = 20;
 	sNullStmt = 21;
@@ -88,28 +93,31 @@
 	sIfStmt = 26;
 	sThen = 27;
 	sElse = 28;
-	sWhileStmt = 29;
-	sRepeatStmt = 30;
-	sRepeatEnd = 31;
-	sEq = 32;
-	sNE = 33;
-	sLT = 34;
-	sLE = 35;
-	sGT = 36;
-	sGE = 37;
-	sAdd = 38;
-	sSubtract = 39;
-	sMultiply = 40;
-	sDivide = 41;
-	sModulus = 42;
-	sInfixOr = 43;
-	sOr = 44;
-	sInfixAnd = 45;
-	sAnd = 46;
-	sNot = 47;
-	sNewLine = 48;
-	sEndOfFile = 49;
-	lastSemanticToken = 49;
+	sRepStmt = 29;
+	sRepOnBreak = 30;
+	sEq = 31;
+	sNE = 32;
+	sLT = 33;
+	sLE = 34;
+	sGT = 35;
+	sGE = 36;
+	sAdd = 37;
+	sSubtract = 38;
+	sMultiply = 39;
+	sDivide = 40;
+	sModulus = 41;
+	sInfixOr = 42;
+	sOr = 43;
+	sInfixAnd = 44;
+	sAnd = 45;
+	sNot = 46;
+	sModule = 47;
+	sPublic = 48;
+	sSubstring = 49;
+	sLen = 50;
+	sNewLine = 51;
+	sEndOfFile = 52;
+	lastSemanticToken = 52;
 
 	{ Input/Output Tokens }
 
@@ -119,33 +127,30 @@
 
 	{ S/SL Rule Table Addresses } {
 	Program = 0;
-	Block = 34;
-	ConstantDefinitions = 86;
-	TypeDefinitions = 174;
-	VariableDeclarations = 305;
-	ProcedureHeading = 335;
-	BeginStmt = 509;
-	ConstantValue = 112;
-	UnsignedIntegerConstant = 154;
-	TypeBody = 204;
-	SimpleType = 256;
-	OptionallySignedIntegerConstant = 285;
-	Statement = 383;
-	AssignmentOrCallStmt = 425;
-	IfStmt = 535;
-	WhileStmt = 622;
-	CaseStmt = 559;
-	RepeatStmt = 633;
-	Expression = 663;
-	CallStmt = 465;
-	CaseAlternative = 602;
-	SimpleExpression = 717;
-	Term = 770;
-	Factor = 814;
-	IdentifierExtension = 872;
+	Block = 24;
+	ConstantDefinitions = 72;
+	TypeDefinitions = 141;
+	VariableDeclarations = 251;
+	ProcedureHeading = 260;
+	BeginStmt = 406;
+	ConstantValue = 79;
+	UnsignedIntegerConstant = 121;
+	TypeBody = 150;
+	SimpleType = 202;
+	OptionallySignedIntegerConstant = 231;
+	Statement = 308;
+	AssignmentOrCallStmt = 326;
+	IfStmt = 424;
+	Expression = 464;
+	CallStmt = 362;
+	CaseAlternative = 444;
+	SimpleExpression = 518;
+	Term = 571;
+	Factor = 615;
+	IdentifierExtension = 673;
 	}
 
 	{ S/SL Table Parameters }
-	sslTblSize = 902;
+	sslTblSize = 703;
 	minSslTableValue = -32767;
 	maxSslTableValue = 32767;
diff --git a/ptsrc/lib/pt/parser.out b/ptsrc/lib/pt/parser.out
index 75debea..b4b2ab9 100755
Binary files a/ptsrc/lib/pt/parser.out and b/ptsrc/lib/pt/parser.out differ
diff --git a/ptsrc/lib/pt/parser.sst b/ptsrc/lib/pt/parser.sst
index 97eceb6..0d6aabc 100644
Binary files a/ptsrc/lib/pt/parser.sst and b/ptsrc/lib/pt/parser.sst differ
diff --git a/ptsrc/parser/parser.def b/ptsrc/parser/parser.def
index 4c2ea7a..9475710 100644
--- a/ptsrc/parser/parser.def
+++ b/ptsrc/parser/parser.def
@@ -7,25 +7,25 @@
 	pOr = 2;
 	pAnd = 3;
 	pNot = 4;
-	pThen = 5;
-	pElse = 6;
-	pOf = 7;
-	pEnd = 8;
-	pUntil = 9;
-	pDo = 10;
-	pArray = 11;
-	pFile = 12;
-	pPacked = 13;
-	pProgram = 14;
-	pConst = 15;
-	pVar = 16;
-	pType = 17;
-	pProcedure = 18;
-	pBegin = 19;
-	pIf = 20;
-	pCase = 21;
-	pWhile = 22;
-	pRepeat = 23;
+	pElse = 5;
+	pOf = 6;
+	pEnd = 7;
+	pArray = 8;
+	pFile = 9;
+	pPacked = 10;
+	pVar = 11;
+	pIf = 12;
+	pExt = 13;
+	pCon = 14;
+	pTyp = 15;
+	pDef = 16;
+	pPub = 17;
+	pElif = 18;
+	pSel = 19;
+	pIs = 20;
+	pOn = 21;
+	pBreak = 22;
+	pLen = 23;
 	lastKeywordToken = 23;
 	pIdentifier = 24;
 	firstCompoundInputToken = 24;
@@ -37,23 +37,28 @@
 	pPlus = 29;
 	pMinus = 30;
 	pStar = 31;
-	pColonEquals = 32;
-	pDot = 33;
-	pComma = 34;
-	pSemicolon = 35;
-	pColon = 36;
-	pEquals = 37;
-	pNotEqual = 38;
-	pLess = 39;
-	pLessEqual = 40;
-	pGreaterEqual = 41;
-	pGreater = 42;
-	pLeftParen = 43;
-	pRightParen = 44;
-	pLeftBracket = 45;
-	pRightBracket = 46;
-	pDotDot = 47;
-	lastSyntaxToken = 47;
+	pPlusEquals = 32;
+	pMinusEquals = 33;
+	pDoubleEquals = 34;
+	pLeftBrace = 35;
+	pRightBrace = 36;
+	pDot = 37;
+	pComma = 38;
+	pSemicolon = 39;
+	pColon = 40;
+	pEquals = 41;
+	pNotEqual = 42;
+	pLess = 43;
+	pLessEqual = 44;
+	pGreaterEqual = 45;
+	pGreater = 46;
+	pLeftParen = 47;
+	pRightParen = 48;
+	pLeftBracket = 49;
+	pRightBracket = 50;
+	pBang = 51;
+	pDotDot = 52;
+	lastSyntaxToken = 52;
 
 	{ Output Tokens }
 	sIdentifier = 0;
@@ -76,8 +81,8 @@
 	sPacked = 14;
 	sFile = 15;
 	sRange = 16;
-	sCaseStmt = 17;
-	sCaseEnd = 18;
+	sSelStmt = 17;
+	sSelEnd = 18;
 	sLabelEnd = 19;
 	sExpnEnd = 20;
 	sNullStmt = 21;
@@ -88,28 +93,31 @@
 	sIfStmt = 26;
 	sThen = 27;
 	sElse = 28;
-	sWhileStmt = 29;
-	sRepeatStmt = 30;
-	sRepeatEnd = 31;
-	sEq = 32;
-	sNE = 33;
-	sLT = 34;
-	sLE = 35;
-	sGT = 36;
-	sGE = 37;
-	sAdd = 38;
-	sSubtract = 39;
-	sMultiply = 40;
-	sDivide = 41;
-	sModulus = 42;
-	sInfixOr = 43;
-	sOr = 44;
-	sInfixAnd = 45;
-	sAnd = 46;
-	sNot = 47;
-	sNewLine = 48;
-	sEndOfFile = 49;
-	lastSemanticToken = 49;
+	sRepStmt = 29;
+	sRepOnBreak = 30;
+	sEq = 31;
+	sNE = 32;
+	sLT = 33;
+	sLE = 34;
+	sGT = 35;
+	sGE = 36;
+	sAdd = 37;
+	sSubtract = 38;
+	sMultiply = 39;
+	sDivide = 40;
+	sModulus = 41;
+	sInfixOr = 42;
+	sOr = 43;
+	sInfixAnd = 44;
+	sAnd = 45;
+	sNot = 46;
+	sModule = 47;
+	sPublic = 48;
+	sSubstring = 49;
+	sLen = 50;
+	sNewLine = 51;
+	sEndOfFile = 52;
+	lastSemanticToken = 52;
 
 	{ Input/Output Tokens }
 
@@ -119,33 +127,30 @@
 
 	{ S/SL Rule Table Addresses } {
 	Program = 0;
-	Block = 34;
-	ConstantDefinitions = 86;
-	TypeDefinitions = 174;
-	VariableDeclarations = 305;
-	ProcedureHeading = 335;
-	BeginStmt = 509;
-	ConstantValue = 112;
-	UnsignedIntegerConstant = 154;
-	TypeBody = 204;
-	SimpleType = 256;
-	OptionallySignedIntegerConstant = 285;
-	Statement = 383;
-	AssignmentOrCallStmt = 425;
-	IfStmt = 535;
-	WhileStmt = 622;
-	CaseStmt = 559;
-	RepeatStmt = 633;
-	Expression = 663;
-	CallStmt = 465;
-	CaseAlternative = 602;
-	SimpleExpression = 717;
-	Term = 770;
-	Factor = 814;
-	IdentifierExtension = 872;
+	Block = 24;
+	ConstantDefinitions = 72;
+	TypeDefinitions = 141;
+	VariableDeclarations = 251;
+	ProcedureHeading = 260;
+	BeginStmt = 406;
+	ConstantValue = 79;
+	UnsignedIntegerConstant = 121;
+	TypeBody = 150;
+	SimpleType = 202;
+	OptionallySignedIntegerConstant = 231;
+	Statement = 308;
+	AssignmentOrCallStmt = 326;
+	IfStmt = 424;
+	Expression = 464;
+	CallStmt = 362;
+	CaseAlternative = 444;
+	SimpleExpression = 518;
+	Term = 571;
+	Factor = 615;
+	IdentifierExtension = 673;
 	}
 
 	{ S/SL Table Parameters }
-	sslTblSize = 902;
+	sslTblSize = 703;
 	minSslTableValue = -32767;
 	maxSslTableValue = 32767;
diff --git a/ptsrc/parser/parser.pt b/ptsrc/parser/parser.pt
index 3f75ce5..38759fd 100644
--- a/ptsrc/parser/parser.pt
+++ b/ptsrc/parser/parser.pt
@@ -118,9 +118,9 @@ program ScannerParser(output, stdIdentifiers, scanSsl, parseSsl, source, parseSt
         pPlus = 29;
         pMinus = 30;
         pStar = 31;
-        pPlusEqual = 32;     
-        pMinusEqual = 33;  { Adding the token definitions for operators from line 121-142 }
-        pDoubleEqual = 34;
+        pPlusEquals = 32;     
+        pMinusEquals = 33;  { Adding the token definitions for operators from line 121-142 }
+        pDoubleEquals = 34;
         pLeftBrace = 35;
         pRightBrace = 36;
         pDot = 37;
@@ -169,8 +169,8 @@ program ScannerParser(output, stdIdentifiers, scanSsl, parseSsl, source, parseSt
         sPacked = 14;
         sFile = 15;
         sRange = 16;
-        sCaseStmt = 17;
-        sCaseEnd = 18;
+        sSelStmt = 17; { Updated from sCaseStmt to sSelStmt }
+        sSelEnd = 18; { Updated from sCaseEnd to sSelEnd }
         sLabelEnd = 19;
         sExpnEnd = 20;
         sNullStmt = 21;
@@ -181,28 +181,31 @@ program ScannerParser(output, stdIdentifiers, scanSsl, parseSsl, source, parseSt
         sIfStmt = 26;
         sThen = 27;
         sElse = 28;
-        sWhileStmt = 29;
-        sRepeatStmt = 30;
-        sRepeatEnd = 31;
-        sEq = 32;
-        sNE = 33;
-        sLT = 34;
-        sLE = 35;
-        sGT = 36;
-        sGE = 37;
-        sAdd = 38;
-        sSubtract = 39;
-        sMultiply = 40;
-        sDivide = 41;
-        sModulus = 42;
-        sInfixOr = 43;
-        sOr = 44;
-        sInfixAnd = 45;
-        sAnd = 46;
-        sNot = 47;
-        sNewLine = 48;
-        sEndOfFile = 49;
-        lastSemanticToken = 49;
+        sRepStmt = 29; { Removed sWhileStmt, sRepeatStmt, and sRepeatEnd }
+        sRepOnBreak = 30; { Added sRepStmt, and sRepOnBreak }
+        sEq = 31;
+        sNE = 32;
+        sLT = 33;
+        sLE = 34;
+        sGT = 35;
+        sGE = 36;
+        sAdd = 37;
+        sSubtract = 38;
+        sMultiply = 39;
+        sDivide = 40;
+        sModulus = 41;
+        sInfixOr = 42;
+        sOr = 43;
+        sInfixAnd = 44;
+        sAnd = 45;
+        sNot = 46;
+        sModule = 47; { Added sModule and sPublic for Quby modules }
+        sPublic = 48;
+        sSubstring = 49; { Added sSubstring and sLen for Quby strings}
+        sLen = 50;
+        sNewLine = 51;
+        sEndOfFile = 52;
+        lastSemanticToken = 52;
 
 { ===== End of semantic tokens copied from parser.def }
 
diff --git a/ptsrc/parser/parser.ssl b/ptsrc/parser/parser.ssl
index 37543cc..7a60deb 100644
--- a/ptsrc/parser/parser.ssl
+++ b/ptsrc/parser/parser.ssl
@@ -24,26 +24,26 @@ Input :
         pOr                     'or'
         pAnd                    'and'
         pNot                    'not'
-        pThen                   'then'
         pElse                   'else'
         pOf                     'of'
         pEnd                    'end'
-        pUntil                  'until'
-        pDo                     'do'
         pArray                  'array'
         pFile                   'file'
         pPacked                 'packed'
-        pProgram                'program'
-        pConst                  'const'
         pVar                    'var'
-        pType                   'type'
-        pProcedure              'procedure'
-        pBegin                  'begin'
         pIf                     'if'
-        pCase                   'case'
-        pWhile                  'while'
-        pRepeat                 'repeat'
-        lastKeywordToken = pRepeat 
+        pExt                    'ext'  % Removed old PT keywords and added keywords seen on lines 35-45
+        pCon                    'con'
+        pTyp                    'typ'
+        pDef                    'def'
+        pPub                    'pub'
+        pElif                   'elif'
+        pSel                    'sel'
+        pIs                     'is'
+        pOn                     'on'
+        pBreak                  'break'
+        pLen                    'len'        
+        lastKeywordToken = pLen 
 
         pIdentifier 
         firstCompoundInputToken = pIdentifier
@@ -56,7 +56,11 @@ Input :
         pPlus                   '+'
         pMinus                  '-'
         pStar                   '*'
-        pColonEquals            ':='
+        pPlusEquals             '+='  % Added Quby plus equals token and remove colon equals := token.
+        pMinusEquals            '-='  % Added Quby minus equals token
+        pDoubleEquals           '=='  % Added Quby double equals token
+        pLeftBrace              '{'   % Added Quby left brace token
+        pRightBrace             '}'   % Added Quby right brace token
         pDot                    '.'
         pComma                  ','
         pSemicolon              ';'
@@ -71,6 +75,7 @@ Input :
         pRightParen             ')'
         pLeftBracket            '['
         pRightBracket           ']'
+        pBang                   '#'   % Added Quby non-compound bang token
         pDotDot                 '..'
         lastSyntaxToken = pDotDot;
 
@@ -96,8 +101,8 @@ Output :
         sPacked
         sFile
         sRange
-        sCaseStmt
-        sCaseEnd
+        sSelStmt   % Changed from sCaseStmt to sSelStmt for Quby select statements
+        sSelEnd    % Changed from sCaseEnd to sSelEnd
         sLabelEnd
         sExpnEnd
         sNullStmt
@@ -108,9 +113,8 @@ Output :
         sIfStmt
         sThen
         sElse
-        sWhileStmt
-        sRepeatStmt
-        sRepeatEnd
+        sRepStmt   % Added sRepStmt and sRepOnBreak, removed PT sWhileStmt, sRepeatStmt, and sRepeatEnd
+        sRepOnBreak
         sEq
         sNE
         sLT
@@ -127,6 +131,10 @@ Output :
         sInfixAnd
         sAnd
         sNot
+        sModule    % Added Quby sModule and sPublic for Quby modules
+        sPublic 
+        sSubstring % Added sSubstring and sLen for Quby string operations
+        sLen
         sNewLine
         sEndOfFile
         lastSemanticToken = sEndOfFile;
@@ -135,11 +143,8 @@ Output :
 rules
 
 Program :
-        'program'  .sProgram
-        % program name
-        pIdentifier
+        'ext'  .sProgram % Quby programs begin with 'ext' not 'program', and do not have a program name, only parameters.
         % program parameters
-        '('
         {
             pIdentifier  .sIdentifier
             [
@@ -148,9 +153,8 @@ Program :
                     >
             ]
         }
-        ')'
         .sParmEnd
-        ';'  @Block  '.';
+        @Block; % Quby has no semicolons and does not use periods after end of program. 
 
 Block :
         % Strictly speaking, standard Pascal requires that declarations
@@ -158,38 +162,31 @@ Block :
         % We allow arbitrary intermixing of these instead to preserve
         % programmer sanity.
         {[
-            | 'const':
+            | 'con':
                 .sConst
                 @ConstantDefinitions
-            | 'type':
+            | 'typ':
                 .sType
                 @TypeDefinitions
             | 'var':
                 .sVar
                 @VariableDeclarations
-            | 'procedure':
+            | 'def':
                 .sProcedure
                 % procedure name
                 pIdentifier  .sIdentifier
                 @ProcedureHeading
-                @Block  ';'
+                @Block  % remove semicolon after procedure statement
             | *:
                 >
         ]}
-        'begin'
+        % Quby no longer uses 'begin' at beginning of procedures
         @BeginStmt;
 
 ConstantDefinitions :
         % Accept one or more named constant definitions
         pIdentifier  .sIdentifier
-        @ConstantValue ';'
-        {[
-            | pIdentifier:
-                .sIdentifier
-                @ConstantValue ';'
-            | *:
-                >
-        ]};
+        @ConstantValue;  % Remove ability to have multiple constant type declaration with only one keyword. Quby require 'con' keyword to be repeated for each declaration.
 
 ConstantValue :
         '='
@@ -218,14 +215,8 @@ UnsignedIntegerConstant :
 TypeDefinitions :
         % Accept one or more named type definitions.
         pIdentifier  .sIdentifier
-        '='  @TypeBody  ';'
-        {[
-            | pIdentifier:
-                .sIdentifier
-                '='  @TypeBody  ';'
-            | *:
-                >
-        ]};
+        ':'  @TypeBody % Look for colon, and no longer expect semicolon
+        ; % Remove ability to have multiple declarations under one 'typ' keyword
 
 TypeBody :
         [
@@ -276,14 +267,8 @@ OptionallySignedIntegerConstant :
 VariableDeclarations :
         % Accept one or more variable declarations.
         pIdentifier  .sIdentifier
-        ':'  @TypeBody  ';'
-        {[
-            | pIdentifier:
-                .sIdentifier
-                ':'  @TypeBody  ';'
-            | *:
-                >
-        ]};
+        ':'  @TypeBody  % don't expect semicolon
+        ; % Remove ability to have multiple var declarations after each other         
 
 ProcedureHeading :
         % Accept zero or more procedure formal parameter declarations.
@@ -317,23 +302,23 @@ Statement :
         [
             | pIdentifier:
                 @AssignmentOrCallStmt
-            | 'begin':
-                @BeginStmt
+%            | 'begin':
+%                @BeginStmt
             | 'if':
                 @IfStmt
-            | 'while':
-                @WhileStmt
-            | 'case':
-                @CaseStmt
-            | 'repeat':
-                @RepeatStmt
-            | *:
+%            | 'while':
+%                @WhileStmt
+%            | 'case':
+%                @CaseStmt
+%            | 'repeat':
+%                @RepeatStmt
+             | *:
                 .sNullStmt
         ];
 
 AssignmentOrCallStmt :
         [
-            | ':=':
+            | '=':
                 .sAssignmentStmt
                 .sIdentifier    % identifier accepted in the Statement rule
                 @Expression
@@ -344,7 +329,7 @@ AssignmentOrCallStmt :
                 .sSubscript
                 @Expression
                 .sExpnEnd
-                ']'  ':='
+%                ']'  ':='
                 @Expression
                 .sExpnEnd
             | *:
@@ -383,49 +368,49 @@ CallStmt :
 BeginStmt :
         .sBegin
         {
-            @Statement
+            @Statement % In Quby declarations and statements are seperate, so after all the statements are complete the program should end.
             [
-                | ';':
-                | 'end':
-                    .sEnd
-                    >
+                  | pNewLine:
+                  | *:
+                       >
             ]
-        };
+        }
+        .sEnd;
 
 IfStmt :
         .sIfStmt
         @Expression
         .sExpnEnd
-        'then'  .sThen
+%        'then'  .sThen
         @Statement
-        [
+         [
             | 'else':
                 .sElse
                 @Statement
             | *:
         ];
 
-CaseStmt :
-        .sCaseStmt
-        @Expression
-        .sExpnEnd
-        'of'
-        @CaseAlternative
-        {[
-            | ';':
-                % since case alternatives cannot be null, allow
-                % for the common situation of an extra semicolon
-                % at the end of the list of case alternatives.
-                [
-                    | 'end':
-                        >
-                    | *:
-                        @CaseAlternative
-                ]
-            | 'end':
-                >
-        ]}
-        .sCaseEnd;
+%CaseStmt :
+%        .sCaseStmt
+%        @Expression
+%        .sExpnEnd
+%        'of'
+%        @CaseAlternative
+%        {[
+%            | ';':
+%                % since case alternatives cannot be null, allow
+%                % for the common situation of an extra semicolon
+%                % at the end of the list of case alternatives.
+%                [
+%                    | 'end':
+%                        >
+%                    | *:
+%                       @CaseAlternative
+%                ]
+%            | 'end':
+%                >
+%        ]}
+%        .sCaseEnd;
 
 CaseAlternative :
         % A case alternative is a statement labelled by
@@ -442,26 +427,26 @@ CaseAlternative :
         .sLabelEnd
         ':'  @Statement;
 
-WhileStmt :
-        .sWhileStmt
-        @Expression
-        .sExpnEnd
-        'do'
-        @Statement;
-
-RepeatStmt :
-        .sRepeatStmt
-        {
-            @Statement
-            [
-                | ';':
-                | 'until':
-                    .sRepeatEnd
-                    >
-            ]
-        }
-        @Expression
-        .sExpnEnd;
+%WhileStmt :
+%        .sWhileStmt
+%        @Expression
+%        .sExpnEnd
+%        'do'
+%        @Statement;
+
+%RepeatStmt :
+%        .sRepeatStmt
+%        {
+%            @Statement
+%            [
+%                | ';':
+%                | 'until':
+%                    .sRepeatEnd
+%                    >
+%            ]
+%        }
+%        @Expression
+%        .sExpnEnd;
 
 Expression :
         @SimpleExpression
diff --git a/ptsrc/parser/parser.sst b/ptsrc/parser/parser.sst
index 97eceb6..0d6aabc 100644
Binary files a/ptsrc/parser/parser.sst and b/ptsrc/parser/parser.sst differ
diff --git a/ptsrc/parser/scanner.out b/ptsrc/parser/scanner.out
deleted file mode 100755
index 75debea..0000000
Binary files a/ptsrc/parser/scanner.out and /dev/null differ
