Phase 3 Documentation

Team Members : Clara Fu, Parv Mital, Johan Cornelissen, Mitchell Waite
Group: cisc458n 


The goal of these modifications is to convert the Semantic Analyzer of the PT Pascal compiler into the Semantic Analyzer for Quby. A detailed listing of all the changes made are listed below. They follow the order of the checklist provided in the assignment documentation, adjusted where applicable.

# Changes to the Quby parser since phase 2 completion:
1. += & -= (plus-equals and minus-equals): Changed to call expression rule instead of explicit requirement of pInt and pIdent as RHS and LHS respectively.

2. Substring: Changed to call expression rule instead of only allowing two pInt in operator.

3. Len: Changed it to call @Factor rule instead of only allowing pLit as input.

4. Elif: Removed the sBegin and sEnd emiting tokens because it should do that only once it enters the block itself. (not duplicately) 

5. sNullStmt: Instead of just passing over ';' in the input, parser now outputs sNullStmt and still passes over for any ';' statements. Additionally now declarations can also be null (not just statements).

6. IfStmt: The 'end' statement was made as a requirement at the end of an if-statement instead of being optional (in error).

7. SelStmt: The 'else' statement was made to only be allowed after all select cases. Phase 2 had the ability to have the else statement appear anywhere between the select cases in error.

8. RepStmt: Phase 2 parser.ssl implementation allowed many "on" break statements to appear. Changes were made to ensure only a single "on" break statement is allowed in the parsing phase.

# Non-checklist semantic.ssl changes

1. String equality & String inequality
  - For sEq, added a choice rule, one for tpString that emits tStringEqual and a wildcard to retain old functionality for other types
  - For sNe, added a choice rule, one for tpString that emits tStringEqual and tNot, and a wildcard retain old functionality for other types

2. Prevent use of string types with relational operators
  - Added CompareEqualityOperandTypes, which is essentially the original CompareRelationalOperandTypes code that supports strings and integers
  - Updated CompareRelationalOperandTypes to cough up an error if a string type is detected
  - Modified the handling code for sEq and sNe to call CompareEqualityOperandTypes

# Non-checklist semantic.pt changes

...

# semantic.ssl changes

1. Input Tokens
   - The semantic analyzer input tokens in semantic.ssl were modified to match the output tokens from the parser
   - The input, error, operational, type tokens were updated in semantic.pt to match the tokens seen in semantic.def

2. T-Codes
   - All char T-codes were replaced with string T-Codes
   - Changed char T-codes in SSL source to use string T-coded
   - Removed repeat T-codes
   - Added tCaseElse and tWhileOnBreak
   - Added tConcatenate, tSubstring, tLength, tIndex, tStringEqual

3. String Size
   - Added stringSize definition to the type Integer with a value of 1024

4. StdType
   - Changed stdChar to stdString in StdType

5. Symbol Table
   - Added oSymbolTblStripScope and oSymbolTblMergeScope to the SymbolTable mechanism

6. Symbol Kind
   - Added syModule and syPublicProcedure to the type SymbolKind

7. TypeKind
   - Changed tpChar to tpString
   - Commented out all instances of tpPackedArray

8. TrapKind
   - Changed the names of trWriteChar and trReadChar to trWriteString and trReadString
   - Removed redundant trWriteString
   - Changed trap numbers for trWriteString and trReadString to 109 and 108 respectively
   - Changed all uses of char traps to string traps

9. Module Definition
   - Added new ModuleDefinition rule
   - The body of the ModuleDefinition is incredibly similar to the ProcedureDefinition including using the sIdentifier
     for accepting the module name and defining the scope. The difference between the ModuleDefinition vs ProcedureDefinition
     is that the module definition does not need to branch around the definition and oSymbolTblStripScope and oSymbolTblMergeScope
     were used instead of oSymbolTblPopScope. oSymbolStkSetKind was also given syModule.

10. Con definitions
   - Removed S/SL cycle from ConstantDefinitions to prevent multiple identifier/value pairs per 'con'
   - Removed choice action, so we only recognize exactly one 'con', otherwise an error is thrown 

11. Type definitions
   - Removed S/SL cycle from TypeDefinitions to prevent multiple identifier/value pairs
   - Removed choice action, so we only recognize one 'type', otherwise an error is thrown
  
12. Variable Definitions
   - Removed S/SL cycle from VariableDeclarations to prevent multiple identifier/value pairs per 'var'
   - Removed choice action, so we only recognize one 'var' or else

13. Public Procedure Definition
   - Added a case statement in the ProcedureDefinition to accept the sPublic token, and if the token is given then the
     oSymbolStkSetKind is passed syPublicProcedure. If it is not given then oSymbolStkSetKind is passed syProcedure.
   - In the CallStmt rule, the case statement for oSymbolStkChooseKind was modified so that the case for syProcedure now
     accepts both syProcedure and syPublicProcedure.

14. Rep Statements
   - Changed the WhileStmt rule to RepStmt and other similar name changes as required
   - Added the support for conditional exit using Quby RepOnBreak
   - In RepStmt rule, added a call to Statement rule before the sRepOnBreak
   - Added ssl statement to emit .tNot before .tWhileTest due to rep statements breaking when the "on break" condition is TRUE. Rather in old PT while loops, the loop breaks when the condition is FALSE (keep looping as long as it is true). The .tNot t-code allows the old PT while loop t-codes to be re-used.

15. Sel Statements
   - Changed CaseStmt rule to be the new Quby SelStmt rule, along with other similar name changes as required.
   - Changed SelStmt rule to use sSelStmt and sSelEnd instead of sCaseStmt and sCaseEnd respectively.
   - Added ability to have optional "else" clause in sel statement.
       -Emits tCaseEnd and tCaseElse before processing statements in else block.
       -End of else block and end of sel statement noted by sSelEnd. At this point a final .tCaseMerge is also emitted.
       -Ensured sel alternative count is incremented for else clause. 

16. Ternary Operators
   - Added entry for @TernaryOperator to Expression
   - Added code to handle string substring operator

17. String Concat with sAdd
   - Added handling of string concat within BinaryOperator by adding a rule to sAdd

18. String length operation
   - added handling of sLen to UnaryOperator
   - added check to ensure the type on the type stack is tpString

19. String Literal & T-codes
   - Commented out tStringDescriptor and tSkipString
   - Changed handling of sLiteral in @Operand rule to match the following format:
         push string length
         push syExpression on to symbol stack
         push tpString on to the type stack
         output tLiteralString
         emit string size
         emit the string itself
         pop the string size value

20. String Constants
   - Changed con string declarations to act like a var of type string.
   - Output t-codes in the form of:
         tAssignBegin
         tLiteralAddress <con/var name>
         tLiteralString <string size>
         "string literal"
         tAssignString

# semantic.pt changes

1. Semantic Operations
   - Copied the contents of the newest semantic.def to the header of semantic.pt

2. Predefined Type String
   - Changed the predefined type for Char to be a predefined type for String. Changing pidChar, tpChar, and standardCharTypeRef to pidString, tpString, and standardStringTypeRef appropriately.
   - Changed all standardCharTypeRef references in semantic.pt to standardStringTypeRef.
   - Lastly, made all tpChar references point to tpString

3. Predefined Type Text
   - Changed text (file of char) to be file of strings, and use standardStringTypeRef.

4. Added the case for new semantic operations oSymbolTblStripScope and oSymbolTblMergeScope
   - For oSymbolTblMergeScope, decrements the lexical level in order to merge the scopes 
   - For oSymbolTblStripScope, goes through the top scope in the symbol table setting the symbol table reference for each symbol's identifier index to the one at the next lower lexical level only if the procedure is not public
   - Added an assertion to write empty lexic level stack in oSymbolTblStripScope

5. String Allocation
   - Added rule to allocate `stringSize` bytes for the string type

6. Modified the assertions on the top of SymbolStack to allow for syPublicProcedure
   - Or-ed the assertions for syPublicProcedure with syProcedure
   - Added input tokens for syModule and syPublicProcedure
